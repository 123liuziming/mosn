package hessian

import (
	"bytes"
	"fmt"
	"reflect"

	"gitlab.alipay-inc.com/afe/mosn/pkg/log"
)

type DeserializeTRHessian struct {
}

var HessianInstance = DeserializeTRHessian{}

//Return RequestID
func (d *DeserializeTRHessian) SerializeConnRequestBytes(strEchoBytes []byte) int64 {

	log.DefaultLogger.Println("Serialize TR's Communication Request Data")
	//strEchoBytes = []byte{0x4f, 0xba, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x91, 0x03, 0x63, 0x74, 0x78, 0x6f, 0x90, 0x4f, 0xc8, 0x39, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x24, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x92, 0x02, 0x69, 0x64, 0x06, 0x74, 0x68, 0x69, 0x73, 0x24, 0x30, 0x6f, 0x91, 0xe2, 0x4a, 0x00}

	log.DefaultLogger.Println(string(strEchoBytes))

	buffer2 := bytes.NewReader(strEchoBytes)
	decoder := NewDecoder(*buffer2, nil)

	decoder.RegisterType("com.taobao.remoting.impl.ConnectionRequest", reflect.TypeOf(ConnectionRequest{}))
	decoder.RegisterType("com.taobao.remoting.impl.ConnectionRequest$RequestContext", reflect.TypeOf(RequestContext{}))
	obj, err := decoder.ReadObject()

	if err != nil {
		fmt.Print(err)
	} else {
		fmt.Print("decode request")
		fmt.Print(obj)
		if so, ok := obj.(reflect.Value); ok {
			u1 := so.Interface().(*ConnectionRequest)

			log.DefaultLogger.Println("TR Request ID is: ", u1.Ctx.Id)
			return u1.Ctx.Id
		}

		if so, ok := obj.(SofaRequest); ok {
			log.DefaultLogger.Infof("TR Request SofaRequest is: %+v", so)
			fmt.Print(so.RequestProps)
		}
	}

	return -1
}

//Return Response ID
func (d *DeserializeTRHessian) SerializeConnResponseBytes(strEchoBytes []byte) int64 {

	log.DefaultLogger.Println("Serialize TR's Communication Response Data")
	//strEchoBytes = []byte{0x4f, 0xbb, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x95, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x03, 0x63, 0x74, 0x78, 0x6f, 0x90, 0x13, 0x31, 0x30, 0x2e, 0x31, 0x35, 0x2e, 0x32, 0x33, 0x32, 0x2e, 0x32, 0x34, 0x38, 0x3a, 0x31, 0x32, 0x32, 0x39, 0x39, 0x90, 0x4e, 0x4e, 0x4f, 0xc8, 0x3b, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x6d, 0x70, 0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x24, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x92, 0x02, 0x69, 0x64, 0x06, 0x74, 0x68, 0x69, 0x73, 0x24, 0x30, 0x6f, 0x91, 0xe1, 0x4a, 0x00}

	buffer2 := bytes.NewReader(strEchoBytes)
	decoder := NewDecoder(*buffer2, nil)

	decoder.RegisterType("com.taobao.remoting.impl.ConnectionResponse", reflect.TypeOf(ConnectionResponse{}))
	decoder.RegisterType("com.taobao.remoting.impl.ConnectionResponse$ResponseContext", reflect.TypeOf(ResponseContext{}))
	obj, err := decoder.ReadObject()

	if err != nil {
		fmt.Print(err)
	} else {
		fmt.Print("decode response")
		fmt.Print(obj)
		if so, ok := obj.(reflect.Value); ok {
			u1 := so.Interface().(*ConnectionResponse)

			log.DefaultLogger.Println("TR Response ID is: ", u1.Ctx.Id)
			return u1.Ctx.Id
		}

		if _, ok := obj.(SofaRequest); ok {
			//fmt.Print(so.RequestProps)
		}
	}

	return -1
}

//Return TargetServiceUniqueName
func (d *DeserializeTRHessian) SerializeAppRequestBytes(strEchoBytes []byte) string {

	log.DefaultLogger.Println("Serialize TR's Application Request Data")

	buffer2 := bytes.NewReader(strEchoBytes)
	decoder := NewDecoder(*buffer2, nil)

	decoder.RegisterType("com.alipay.sofa.rpc.core.request.SofaRequest", reflect.TypeOf(SofaRequest{}))
	obj, err := decoder.ReadObject()

	if err != nil {
		fmt.Print("err")
	} else {

		fmt.Print(obj)
		if so, ok := obj.(reflect.Value); ok {
			u1 := so.Interface().(*SofaRequest) //

			log.DefaultLogger.Println("TR Request TargetServiceUniqueName  is: ", u1.TargetServiceUniqueName)
			return u1.TargetServiceUniqueName

		}

		if _, ok := obj.(SofaRequest); ok {
			//fmt.Print(so.RequestProps)    //HEADER MAP
		}
	}
	return ""
}
