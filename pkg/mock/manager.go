// Code generated by MockGen. DO NOT EDIT.
// Source: ../../pkg/filter/manager.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "mosn.io/api"
	filter "mosn.io/mosn/pkg/filter"
	types "mosn.io/mosn/pkg/types"
	buffer "mosn.io/pkg/buffer"
	reflect "reflect"
)

// MockStreamFilterFactory is a mock of StreamFilterFactory interface.
type MockStreamFilterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFilterFactoryMockRecorder
}

// MockStreamFilterFactoryMockRecorder is the mock recorder for MockStreamFilterFactory.
type MockStreamFilterFactoryMockRecorder struct {
	mock *MockStreamFilterFactory
}

// NewMockStreamFilterFactory creates a new mock instance.
func NewMockStreamFilterFactory(ctrl *gomock.Controller) *MockStreamFilterFactory {
	mock := &MockStreamFilterFactory{ctrl: ctrl}
	mock.recorder = &MockStreamFilterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamFilterFactory) EXPECT() *MockStreamFilterFactoryMockRecorder {
	return m.recorder
}

// CreateFilterChain mocks base method.
func (m *MockStreamFilterFactory) CreateFilterChain(context context.Context, callbacks api.StreamFilterChainFactoryCallbacks) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateFilterChain", context, callbacks)
}

// CreateFilterChain indicates an expected call of CreateFilterChain.
func (mr *MockStreamFilterFactoryMockRecorder) CreateFilterChain(context, callbacks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilterChain", reflect.TypeOf((*MockStreamFilterFactory)(nil).CreateFilterChain), context, callbacks)
}

// GetConfig mocks base method.
func (m *MockStreamFilterFactory) GetConfig() filter.StreamFilterConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(filter.StreamFilterConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockStreamFilterFactoryMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockStreamFilterFactory)(nil).GetConfig))
}

// MockStreamFilterManager is a mock of StreamFilterManager interface.
type MockStreamFilterManager struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFilterManagerMockRecorder
}

// MockStreamFilterManagerMockRecorder is the mock recorder for MockStreamFilterManager.
type MockStreamFilterManagerMockRecorder struct {
	mock *MockStreamFilterManager
}

// NewMockStreamFilterManager creates a new mock instance.
func NewMockStreamFilterManager(ctrl *gomock.Controller) *MockStreamFilterManager {
	mock := &MockStreamFilterManager{ctrl: ctrl}
	mock.recorder = &MockStreamFilterManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamFilterManager) EXPECT() *MockStreamFilterManagerMockRecorder {
	return m.recorder
}

// AddOrUpdateStreamFilterConfig mocks base method.
func (m *MockStreamFilterManager) AddOrUpdateStreamFilterConfig(key string, config filter.StreamFilterConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateStreamFilterConfig", key, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateStreamFilterConfig indicates an expected call of AddOrUpdateStreamFilterConfig.
func (mr *MockStreamFilterManagerMockRecorder) AddOrUpdateStreamFilterConfig(key, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateStreamFilterConfig", reflect.TypeOf((*MockStreamFilterManager)(nil).AddOrUpdateStreamFilterConfig), key, config)
}

// GetStreamFilterFactory mocks base method.
func (m *MockStreamFilterManager) GetStreamFilterFactory(key string) filter.StreamFilterFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamFilterFactory", key)
	ret0, _ := ret[0].(filter.StreamFilterFactory)
	return ret0
}

// GetStreamFilterFactory indicates an expected call of GetStreamFilterFactory.
func (mr *MockStreamFilterManagerMockRecorder) GetStreamFilterFactory(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamFilterFactory", reflect.TypeOf((*MockStreamFilterManager)(nil).GetStreamFilterFactory), key)
}

// MockStreamFilterChain is a mock of StreamFilterChain interface.
type MockStreamFilterChain struct {
	ctrl     *gomock.Controller
	recorder *MockStreamFilterChainMockRecorder
}

// MockStreamFilterChainMockRecorder is the mock recorder for MockStreamFilterChain.
type MockStreamFilterChainMockRecorder struct {
	mock *MockStreamFilterChain
}

// NewMockStreamFilterChain creates a new mock instance.
func NewMockStreamFilterChain(ctrl *gomock.Controller) *MockStreamFilterChain {
	mock := &MockStreamFilterChain{ctrl: ctrl}
	mock.recorder = &MockStreamFilterChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamFilterChain) EXPECT() *MockStreamFilterChainMockRecorder {
	return m.recorder
}

// AddStreamSenderFilter mocks base method.
func (m *MockStreamFilterChain) AddStreamSenderFilter(filter api.StreamSenderFilter, p api.SenderFilterPhase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStreamSenderFilter", filter, p)
}

// AddStreamSenderFilter indicates an expected call of AddStreamSenderFilter.
func (mr *MockStreamFilterChainMockRecorder) AddStreamSenderFilter(filter, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamSenderFilter", reflect.TypeOf((*MockStreamFilterChain)(nil).AddStreamSenderFilter), filter, p)
}

// AddStreamReceiverFilter mocks base method.
func (m *MockStreamFilterChain) AddStreamReceiverFilter(filter api.StreamReceiverFilter, p api.ReceiverFilterPhase) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStreamReceiverFilter", filter, p)
}

// AddStreamReceiverFilter indicates an expected call of AddStreamReceiverFilter.
func (mr *MockStreamFilterChainMockRecorder) AddStreamReceiverFilter(filter, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamReceiverFilter", reflect.TypeOf((*MockStreamFilterChain)(nil).AddStreamReceiverFilter), filter, p)
}

// AddStreamAccessLog mocks base method.
func (m *MockStreamFilterChain) AddStreamAccessLog(accessLog api.AccessLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStreamAccessLog", accessLog)
}

// AddStreamAccessLog indicates an expected call of AddStreamAccessLog.
func (mr *MockStreamFilterChainMockRecorder) AddStreamAccessLog(accessLog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStreamAccessLog", reflect.TypeOf((*MockStreamFilterChain)(nil).AddStreamAccessLog), accessLog)
}

// RunReceiverFilter mocks base method.
func (m *MockStreamFilterChain) RunReceiverFilter(ctx context.Context, phase api.ReceiverFilterPhase, headers types.HeaderMap, data types.IoBuffer, trailers types.HeaderMap, statusHandler filter.StreamFilterStatusHandler) api.StreamFilterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunReceiverFilter", ctx, phase, headers, data, trailers, statusHandler)
	ret0, _ := ret[0].(api.StreamFilterStatus)
	return ret0
}

// RunReceiverFilter indicates an expected call of RunReceiverFilter.
func (mr *MockStreamFilterChainMockRecorder) RunReceiverFilter(ctx, phase, headers, data, trailers, statusHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunReceiverFilter", reflect.TypeOf((*MockStreamFilterChain)(nil).RunReceiverFilter), ctx, phase, headers, data, trailers, statusHandler)
}

// RunSenderFilter mocks base method.
func (m *MockStreamFilterChain) RunSenderFilter(ctx context.Context, phase api.SenderFilterPhase, headers types.HeaderMap, data types.IoBuffer, trailers types.HeaderMap, statusHandler filter.StreamFilterStatusHandler) api.StreamFilterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSenderFilter", ctx, phase, headers, data, trailers, statusHandler)
	ret0, _ := ret[0].(api.StreamFilterStatus)
	return ret0
}

// RunSenderFilter indicates an expected call of RunSenderFilter.
func (mr *MockStreamFilterChainMockRecorder) RunSenderFilter(ctx, phase, headers, data, trailers, statusHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSenderFilter", reflect.TypeOf((*MockStreamFilterChain)(nil).RunSenderFilter), ctx, phase, headers, data, trailers, statusHandler)
}

// Log mocks base method.
func (m *MockStreamFilterChain) Log(ctx context.Context, reqHeaders, respHeaders api.HeaderMap, requestInfo api.RequestInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", ctx, reqHeaders, respHeaders, requestInfo)
}

// Log indicates an expected call of Log.
func (mr *MockStreamFilterChainMockRecorder) Log(ctx, reqHeaders, respHeaders, requestInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockStreamFilterChain)(nil).Log), ctx, reqHeaders, respHeaders, requestInfo)
}

// OnDestroy mocks base method.
func (m *MockStreamFilterChain) OnDestroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDestroy")
}

// OnDestroy indicates an expected call of OnDestroy.
func (mr *MockStreamFilterChainMockRecorder) OnDestroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDestroy", reflect.TypeOf((*MockStreamFilterChain)(nil).OnDestroy))
}

// MockStreamReceiverFilterWithPhase is a mock of StreamReceiverFilterWithPhase interface.
type MockStreamReceiverFilterWithPhase struct {
	ctrl     *gomock.Controller
	recorder *MockStreamReceiverFilterWithPhaseMockRecorder
}

// MockStreamReceiverFilterWithPhaseMockRecorder is the mock recorder for MockStreamReceiverFilterWithPhase.
type MockStreamReceiverFilterWithPhaseMockRecorder struct {
	mock *MockStreamReceiverFilterWithPhase
}

// NewMockStreamReceiverFilterWithPhase creates a new mock instance.
func NewMockStreamReceiverFilterWithPhase(ctrl *gomock.Controller) *MockStreamReceiverFilterWithPhase {
	mock := &MockStreamReceiverFilterWithPhase{ctrl: ctrl}
	mock.recorder = &MockStreamReceiverFilterWithPhaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamReceiverFilterWithPhase) EXPECT() *MockStreamReceiverFilterWithPhaseMockRecorder {
	return m.recorder
}

// OnDestroy mocks base method.
func (m *MockStreamReceiverFilterWithPhase) OnDestroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDestroy")
}

// OnDestroy indicates an expected call of OnDestroy.
func (mr *MockStreamReceiverFilterWithPhaseMockRecorder) OnDestroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDestroy", reflect.TypeOf((*MockStreamReceiverFilterWithPhase)(nil).OnDestroy))
}

// OnReceive mocks base method.
func (m *MockStreamReceiverFilterWithPhase) OnReceive(ctx context.Context, headers api.HeaderMap, buf buffer.IoBuffer, trailers api.HeaderMap) api.StreamFilterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnReceive", ctx, headers, buf, trailers)
	ret0, _ := ret[0].(api.StreamFilterStatus)
	return ret0
}

// OnReceive indicates an expected call of OnReceive.
func (mr *MockStreamReceiverFilterWithPhaseMockRecorder) OnReceive(ctx, headers, buf, trailers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnReceive", reflect.TypeOf((*MockStreamReceiverFilterWithPhase)(nil).OnReceive), ctx, headers, buf, trailers)
}

// SetReceiveFilterHandler mocks base method.
func (m *MockStreamReceiverFilterWithPhase) SetReceiveFilterHandler(handler api.StreamReceiverFilterHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetReceiveFilterHandler", handler)
}

// SetReceiveFilterHandler indicates an expected call of SetReceiveFilterHandler.
func (mr *MockStreamReceiverFilterWithPhaseMockRecorder) SetReceiveFilterHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReceiveFilterHandler", reflect.TypeOf((*MockStreamReceiverFilterWithPhase)(nil).SetReceiveFilterHandler), handler)
}

// GetPhase mocks base method.
func (m *MockStreamReceiverFilterWithPhase) GetPhase() api.ReceiverFilterPhase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhase")
	ret0, _ := ret[0].(api.ReceiverFilterPhase)
	return ret0
}

// GetPhase indicates an expected call of GetPhase.
func (mr *MockStreamReceiverFilterWithPhaseMockRecorder) GetPhase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhase", reflect.TypeOf((*MockStreamReceiverFilterWithPhase)(nil).GetPhase))
}

// MockStreamSenderFilterWithPhase is a mock of StreamSenderFilterWithPhase interface.
type MockStreamSenderFilterWithPhase struct {
	ctrl     *gomock.Controller
	recorder *MockStreamSenderFilterWithPhaseMockRecorder
}

// MockStreamSenderFilterWithPhaseMockRecorder is the mock recorder for MockStreamSenderFilterWithPhase.
type MockStreamSenderFilterWithPhaseMockRecorder struct {
	mock *MockStreamSenderFilterWithPhase
}

// NewMockStreamSenderFilterWithPhase creates a new mock instance.
func NewMockStreamSenderFilterWithPhase(ctrl *gomock.Controller) *MockStreamSenderFilterWithPhase {
	mock := &MockStreamSenderFilterWithPhase{ctrl: ctrl}
	mock.recorder = &MockStreamSenderFilterWithPhaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamSenderFilterWithPhase) EXPECT() *MockStreamSenderFilterWithPhaseMockRecorder {
	return m.recorder
}

// OnDestroy mocks base method.
func (m *MockStreamSenderFilterWithPhase) OnDestroy() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnDestroy")
}

// OnDestroy indicates an expected call of OnDestroy.
func (mr *MockStreamSenderFilterWithPhaseMockRecorder) OnDestroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnDestroy", reflect.TypeOf((*MockStreamSenderFilterWithPhase)(nil).OnDestroy))
}

// Append mocks base method.
func (m *MockStreamSenderFilterWithPhase) Append(ctx context.Context, headers api.HeaderMap, buf buffer.IoBuffer, trailers api.HeaderMap) api.StreamFilterStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, headers, buf, trailers)
	ret0, _ := ret[0].(api.StreamFilterStatus)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockStreamSenderFilterWithPhaseMockRecorder) Append(ctx, headers, buf, trailers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStreamSenderFilterWithPhase)(nil).Append), ctx, headers, buf, trailers)
}

// SetSenderFilterHandler mocks base method.
func (m *MockStreamSenderFilterWithPhase) SetSenderFilterHandler(handler api.StreamSenderFilterHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSenderFilterHandler", handler)
}

// SetSenderFilterHandler indicates an expected call of SetSenderFilterHandler.
func (mr *MockStreamSenderFilterWithPhaseMockRecorder) SetSenderFilterHandler(handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSenderFilterHandler", reflect.TypeOf((*MockStreamSenderFilterWithPhase)(nil).SetSenderFilterHandler), handler)
}

// GetPhase mocks base method.
func (m *MockStreamSenderFilterWithPhase) GetPhase() api.SenderFilterPhase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhase")
	ret0, _ := ret[0].(api.SenderFilterPhase)
	return ret0
}

// GetPhase indicates an expected call of GetPhase.
func (mr *MockStreamSenderFilterWithPhaseMockRecorder) GetPhase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhase", reflect.TypeOf((*MockStreamSenderFilterWithPhase)(nil).GetPhase))
}
